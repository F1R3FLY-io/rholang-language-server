[package]
name = "rholang-language-server"
version = "0.1.0"
edition = "2024"
license = "Apache-2.0"
description = "Language Server Protocol implementation for Rholang smart contract language"
repository = "https://github.com/F1R3FLY-io/rholang-language-server"
homepage = "https://github.com/F1R3FLY-io/rholang-language-server"
documentation = "https://github.com/F1R3FLY-io/rholang-language-server#readme"
keywords = ["lsp", "rholang", "rchain", "language-server"]
categories = ["development-tools"]
authors = ["F1R3FLY.io <noreply@f1r3fly.io>"]

[dependencies]
anyhow = "1.0"
archery = "1.2.1"  # Matches rpds 1.1.1's dependency
async-trait = "0.1"
chrono = "0.4"  # Used for runtime timestamps in LSP
clap = { version = "4.5", features = ["derive"] }
const_format = "0.2"  # Used for compile-time string formatting
dashmap = "6.1"
dirs = "5.0"
futures = "0.3"  # Includes futures-util functionality
parking_lot = "0.12"
lsp-types = "0.97"
once_cell = "1.20"  # Lazy static initialization (for parse cache)
rustc-hash = "2.0"  # FxHash for fast internal hash maps (Phase 2 optimization)
mork = { git = "https://github.com/trueagi-io/MORK.git", branch = "main", features = ["interning"] }
mork-expr = { git = "https://github.com/trueagi-io/MORK.git", branch = "main" }
mork-frontend = { git = "https://github.com/trueagi-io/MORK.git", branch = "main" }
mettatron = { git = "https://github.com/F1R3FLY-io/MeTTa-Compiler.git", branch = "dylon/rholang-language-server" }
tree-sitter-metta = { git = "https://github.com/F1R3FLY-io/MeTTa-Compiler.git", branch = "dylon/rholang-language-server" }
notify = "5.0"
pathmap = { git = "https://github.com/Adam-Vandervorst/PathMap.git", branch = "master", features = ["jemalloc", "arena_compact"] }
petgraph = "0.8.2"
prost = "0.13"
rayon = "1.10"
rholang-parser = { git = "https://github.com/F1R3FLY-io/rholang-rs.git", branch = "dylon/named-comment-nodes", features = ["named-comments"] }
rholang-tree-sitter = { git = "https://github.com/F1R3FLY-io/rholang-rs.git", branch = "dylon/named-comment-nodes", features = ["named-comments"] }
ropey = "1.6"
rpds = "1.1"
scopeguard = "1.2"
serde_json = "1.0"
serde = { version = "1.0", features = ["derive"] }
suffix = "1.2"  # Suffix array for O(m log n) substring search
thiserror = "1.0"
time = { version = "0.3", features = ["macros", "formatting"] }
tokio-tungstenite = { version = "0.23", optional = true }  # WebSocket support
tokio = { version = "1", features = ["full"] }
tokio-stream = { version = "0.1", features = ["time", "sync"] }
tonic = "0.13"
tower-lsp = "0.20"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "time"] }
tracing-appender = "0.2"
tree-sitter = "0.25"
url = "2.5"
uuid = { version = "1", features = ["v4"] }
walkdir = "2"
validated = "1.0.0"

# Rholang interpreter (optional for semantic validation)
rholang = { git = "https://github.com/F1R3FLY-io/f1r3node.git", branch = "dylon/mettatron", optional = true }

# Platform-specific dependencies
[target.'cfg(unix)'.dependencies]
nix = { version = "0.27", features = ["signal"] }

[dev-dependencies]
indoc = "2"
quickcheck = "1.0"
test_utils = { path = "test_utils" }
criterion = { version = "0.5", features = ["html_reports"] }

[build-dependencies]
tonic-build = "0.13"
chrono = "0.4"

[features]
default = ["websocket", "interpreter"]
websocket = ["tokio-tungstenite"]
interpreter = ["rholang"]

[[bin]]
name = "dummy_client"
path = "test_utils/src/bin/dummy_client.rs"

[[bench]]
name = "detection_worker_benchmark"
harness = false

[[bench]]
name = "lsp_operations_benchmark"
harness = false

[[bench]]
name = "real_world_benchmark"
harness = false

# Debian package metadata
[package.metadata.deb]
maintainer = "F1R3FLY.io <noreply@f1r3fly.io>"
depends = "$auto"
section = "devel"
priority = "optional"
assets = [
    ["target/release/rholang-language-server", "usr/bin/", "755"],
    ["README.md", "usr/share/doc/rholang-language-server/", "644"],
    ["LICENSE", "usr/share/doc/rholang-language-server/", "644"],
]
extended-description = """
Language Server Protocol (LSP) implementation for the Rholang smart contract
language. Provides IDE features such as:
- Go to definition
- Find references
- Code completion
- Document symbols
- Hover information
- Semantic validation
- Cross-file navigation
"""

# RPM package metadata
[package.metadata.generate-rpm]
assets = [
    { source = "target/release/rholang-language-server", dest = "/usr/bin/rholang-language-server", mode = "755" },
    { source = "README.md", dest = "/usr/share/doc/rholang-language-server/README.md", mode = "644" },
    { source = "LICENSE", dest = "/usr/share/doc/rholang-language-server/LICENSE", mode = "644" },
]
[package.metadata.generate-rpm.requires]
glibc = "*"

# ==============================================================================
# Local Development Overrides
# ==============================================================================
# ⚠️ IMPORTANT: These sections are currently UNCOMMENTED and REQUIRED for building
#
# This is due to MORK transitive dependencies that are not yet published or
# accessible via git. Until these dependencies are resolved upstream, all
# [patch] sections below MUST remain UNCOMMENTED.
#
# To install the pre-commit hook (note: will block commits with uncommented patches):
#   ./scripts/install-git-hooks.sh
#
# To uninstall the pre-commit hook:
#   ./scripts/uninstall-git-hooks.sh
#
# Current workflow (temporary, until MORK dependencies are resolved):
# 1. Clone all dependency repositories locally (see README.md for details)
# 2. Keep [patch] sections uncommented (they are already uncommented below)
# 3. To commit: either uninstall hooks or use `git commit --no-verify`
#
# Future workflow (when MORK dependencies are resolved):
# 1. Comment out [patch] sections by default
# 2. Uncomment only when working with local clones
# 3. Pre-commit hook will prevent accidental commits of uncommented sections
# ==============================================================================

[patch.'https://github.com/trueagi-io/MORK.git']
mork = { path = "../MORK/kernel" }
mork-expr = { path = "../MORK/expr" }
mork-frontend = { path = "../MORK/frontend" }

[patch.'https://github.com/F1R3FLY-io/MeTTa-Compiler.git']
mettatron = { path = "../MeTTa-Compiler" }
tree-sitter-metta = { path = "../MeTTa-Compiler/tree-sitter-metta" }

[patch.'https://github.com/Adam-Vandervorst/PathMap.git']
pathmap = { path = "../PathMap" }

[patch.'https://github.com/F1R3FLY-io/rholang-rs.git']
rholang-parser = { path = "../rholang-rs/rholang-parser" }
rholang-tree-sitter = { path = "../rholang-rs/rholang-tree-sitter" }

[patch.'https://github.com/F1R3FLY-io/f1r3node.git']
rholang = { path = "../f1r3node/rholang" }
