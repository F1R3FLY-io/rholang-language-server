name: Build and Test
on:
  push:
    branches:
      - main
      - dylon/*
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    name: Build and Test - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # - name: Windows
          #   os: windows-latest
          #   rustflags: "-C target-feature=+aes,+sse2"
          - name: macOS
            os: macos-latest
            rustflags: "-C target-feature=+aes,+neon"  # Apple Silicon ARM64
          - name: Ubuntu
            os: ubuntu-latest
            rustflags: "-C target-feature=+aes,+sse2"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Checkout dependencies
      run: |
        cd ../
        git clone --depth=1 --branch dylon/mettatron https://github.com/F1R3FLY-io/f1r3node.git f1r3node
        git clone --depth=1 --branch main https://github.com/trueagi-io/MORK.git MORK
        git clone --depth=1 --branch master https://github.com/Adam-Vandervorst/PathMap.git PathMap
        git clone --depth=1 --branch dylon/rholang-language-server https://github.com/F1R3FLY-io/MeTTa-Compiler.git MeTTa-Compiler
        git clone --depth=1 --branch dylon/named-comment-nodes https://github.com/F1R3FLY-io/rholang-rs.git rholang-rs
        cd rholang-language-server
      shell: bash

    # - name: Configure local path overrides for CI
    #   run: |
    #     # Append patch sections to existing .cargo/config.toml
    #     # This preserves the existing rustflags configuration
    #     cat >> .cargo/config.toml <<'EOF'

    #     # ==============================================================================
    #     # CI-specific patch overrides (appended by CI workflow)
    #     # ==============================================================================
    #     # These override the git dependencies in Cargo.toml with local clones
    #     # to avoid repeated git fetches during the build process.

    #     [patch.'https://github.com/trueagi-io/MORK.git']
    #     mork = { path = "../MORK/kernel" }
    #     mork-expr = { path = "../MORK/expr" }
    #     mork-frontend = { path = "../MORK/frontend" }

    #     [patch.'https://github.com/F1R3FLY-io/MeTTa-Compiler.git']
    #     mettatron = { path = "../MeTTa-Compiler" }
    #     tree-sitter-metta = { path = "../MeTTa-Compiler/tree-sitter-metta" }

    #     [patch.'https://github.com/Adam-Vandervorst/PathMap.git']
    #     pathmap = { path = "../PathMap" }

    #     [patch.'https://github.com/F1R3FLY-io/rholang-rs.git']
    #     rholang-parser = { path = "../rholang-rs/rholang-parser" }
    #     rholang-tree-sitter = { path = "../rholang-rs/rholang-tree-sitter" }

    #     [patch.'https://github.com/F1R3FLY-io/f1r3node.git']
    #     rholang = { path = "../f1r3node/rholang" }
    #     EOF
    #     echo "Updated .cargo/config.toml with CI patch overrides"
    #   shell: bash

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: nightly
        components: rustfmt, clippy
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-
    - name: Install protobuf compiler (Ubuntu)
      if: startsWith(matrix.platform.os, 'ubuntu')
      run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      shell: bash

    - name: Install protobuf compiler (macOS)
      if: startsWith(matrix.platform.os, 'macos')
      run: brew install protobuf
      shell: bash

    - name: Install Tree-Sitter CLI
      run: |
        echo "::group::Installing Tree-Sitter CLI"
        npm install -g tree-sitter-cli
        tree-sitter --version
        echo "::endgroup::"
      shell: bash

    - name: Verify build dependencies
      run: |
        echo "::group::Verifying dependencies"
        echo "Protobuf compiler:"
        protoc --version
        echo ""
        echo "Tree-Sitter CLI:"
        tree-sitter --version
        echo "::endgroup::"
      shell: bash

    - name: Build language server
      env:
        RUSTFLAGS: ${{ matrix.platform.rustflags }}
      run: |
        echo "::group::Building rholang-language-server"
        echo "RUSTFLAGS: $RUSTFLAGS"
        cargo build --verbose
        ls -lh target/debug/rholang-language-server
        echo "::endgroup::"
      shell: bash

    - name: Run tests
      env:
        RUSTFLAGS: ${{ matrix.platform.rustflags }}
      run: |
        echo "::group::Running cargo tests"
        cargo test --verbose -- --nocapture
        echo "::endgroup::"
      shell: bash

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.platform.name }}
        path: |
          target/debug/
          *.log
        retention-days: 7
